// *** Export Layers as PNG files (in multiple resolutions) ***//// Version: 1.0 (29 Aug 2012)// Copyright Arcticmill 2012 // www.arcticmill.com// Developed by: Johan Otterud// // These options can be configured below:// *** Config options  ***var subFolderName = "../social-icons";// var saveInMultipleResolutions = true;// ...// Note: only use one character!// var exportLayersStartingWith = "#";// var exportLayersWithArtboardClippingStartingWith = "%";// ...// var lowResolutionFileAppend = "@Low";var normalResolutionFileAppend = "";var highResolutionFileAppend = "2x";// ...// var lowResolutionScale = 50;var normalResolutionScale = 50;var highResolutionScale = 100;// *** Start of script ***var doc = app.activeDocument;// Make sure we have saved the documentif (doc.path != "") {    // Check if we need to create the export directory or we will get errors up ahead    var exportDirectoryPath = doc.path + "/" + subFolderName;    var exportDirectory = new Folder(exportDirectoryPath);    if (!exportDirectory.exists) {        // We must create the export directory it seems        var newFolder = new Folder(exportDirectoryPath);        newFolder.create();    }    var layerData = new Array();    // Finds all layers that should be saved and saves these to the export layers array    collectLayerData(doc, null);    var layersToExportCount = 0;    for (var i = 0; i < layerData.length; i++) {        // Hide all layers first        hideAllLayers();        var clipToArtboard = false;        // Now show all layers needed to actually display the current layer on screen        layerData[i].showIncludingParentAndChildLayers(); //showIncludingParents();        // Now we can export the layer as one or multiple PNG files!         var savePath = doc.path; // Save to same folder as document but in a sub directory        // Social Icon Normal        savePath.changePath(subFolderName + "/" + layerData[i].layer.name + fixFileAppend(normalResolutionFileAppend));        savePNG(savePath, normalResolutionScale);        savePath = doc.path;        // Social Icon 2x        savePath.changePath(subFolderName + "/" + layerData[i].layer.name + fixFileAppend(highResolutionFileAppend));        savePNG(savePath, highResolutionScale);        layersToExportCount++;    }    // Restore everything like it was before!    restoreAllLayers();        // Show a completed message        alert(layersToExportCount + " layer(s) was successfully exported to: \n" + exportDirectoryPath);} else {    // Document not saved yet!    alert("Sorry, but you must save your document before you can use the export layers script! This is because exported images are saved in a subfolder to your original file.");}function fixFileAppend(fileAppend) {    if (fileAppend == "") {        return "";    } else {        return fileAppend + ".png";    }}function hideAllLayers() {    for (var i = 0; i < layerData.length; i++) {        layerData[i].hide();    }}function restoreAllLayers() {    for (var i = 0; i < layerData.length; i++) {        layerData[i].restoreVisibility();    }}// Collects information about the various layersfunction collectLayerData(rootLayer, extendedRootLayer) {    for (var i = 0; i < rootLayer.layers.length; i++) {        // We never even process locked or hidden layers        if ((!rootLayer.layers[i].locked) && (rootLayer.layers[i].visible)) {            var extendedLayer = new ExtendedLayer(rootLayer.layers[i]);            // Set up parent            extendedLayer.parentLayer = extendedRootLayer;            // Also add this layer to the parents child collection            if (extendedRootLayer != null) {                extendedRootLayer.childLayers.push(extendedLayer);            }            layerData.push(extendedLayer);            // We should not export this layer but we continue looking for sub layers that might need to be exported            collectLayerData(rootLayer.layers[i], extendedLayer);        }    }}// Holds info and additional methods for layersfunction ExtendedLayer(layer) {    this.originalVisibility = layer.visible;    this.layer = layer;    this.tag = "";    this.hide = hide;    this.show = show;    this.showIncludingParentAndChildLayers = showIncludingParentAndChildLayers;    this.restoreVisibility = restoreVisibility;    this.restoreVisibilityIncludingChildLayers = restoreVisibilityIncludingChildLayers;    this.layerName = layer.name;    // Set after creating    this.childLayers = new Array();    this.parentLayer = null;    function hide() {        layer.visible = false;    }    function show() {        layer.visible = true;    }    // Shows this layer including it's parent layers (up to the root) and it's child layers    function showIncludingParentAndChildLayers() {        var parentlayerName = "";        if (this.parentLayer != null) {            parentlayerName = this.parentLayer.layerName;        }        // Show all parents first        var aParentLayer = this.parentLayer;        while (aParentLayer != null) {            aParentLayer.restoreVisibility();            // Keep looking            aParentLayer = aParentLayer.parentLayer;        }        // Show our own layer finally        this.restoreVisibilityIncludingChildLayers();    }    function restoreVisibility() {        layer.visible = this.originalVisibility;    }    function restoreVisibilityIncludingChildLayers() {        this.restoreVisibility();        // Call recursively for each child layer        for (var i = 0; i < this.childLayers.length; i++) {            this.childLayers[i].restoreVisibilityIncludingChildLayers();        }    }}// Save PNG filefunction savePNG(file, scale, artBoardClipping) {    var exp = new ExportOptionsPNG24();    exp.transparency = true;    exp.horizontalScale = scale    exp.verticalScale = scale;    // exp.artBoardClipping = artBoardClipping;    doc.exportFile(file, ExportType.PNG24, exp);}